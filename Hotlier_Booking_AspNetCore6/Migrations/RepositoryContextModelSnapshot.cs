// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hotlier_Booking_AspNetCore6.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"), 1L, 1);

                    b.Property<int>("Adult")
                        .HasColumnType("int");

                    b.Property<string>("BookingEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BookingMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("Child")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("RoomID");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingID = 1,
                            Adult = 1,
                            BookingEmail = "f@gmail.com",
                            BookingMessage = "falanca",
                            BookingName = " dalanca",
                            CheckIn = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(1446),
                            CheckOut = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(1453),
                            Child = 1,
                            IsDone = false,
                            RoomID = 1
                        },
                        new
                        {
                            BookingID = 2,
                            Adult = 1,
                            BookingEmail = "f@gmail.com",
                            BookingMessage = "falanca",
                            BookingName = " dalanca",
                            CheckIn = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(1455),
                            CheckOut = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(1456),
                            Child = 1,
                            IsDone = false,
                            RoomID = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactID"), 1L, 1);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactSubject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ContactID");

                    b.ToTable("Contact");

                    b.HasData(
                        new
                        {
                            ContactID = 1,
                            ContactEmail = "Sevdigimkiz@hotmail.com",
                            ContactMessage = "Haberi köye düştü",
                            ContactName = "Ali Cabbar",
                            ContactSubject = "Askere gidiyorum"
                        },
                        new
                        {
                            ContactID = 2,
                            ContactEmail = "Sevdigimkiza@hotmail.com",
                            ContactMessage = "Haberi köye düştü la",
                            ContactName = "Ali Cabbara",
                            ContactSubject = "Askere gidiyoruma"
                        });
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"), 1L, 1);

                    b.Property<bool>("IsRoomActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("RoomAvailableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomBath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomBed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoomPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RoomPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RoomID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomID = 1,
                            IsRoomActive = true,
                            RoomAvailableDate = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(2444),
                            RoomBath = "1 Banyo",
                            RoomBed = "Çift Kişilik Yatak",
                            RoomDetail = "Deniz Manzaralı",
                            RoomName = "Standart Oda",
                            RoomPhotoUrl = "/images/room-1.jpg",
                            RoomPrice = 100.00m
                        },
                        new
                        {
                            RoomID = 2,
                            IsRoomActive = true,
                            RoomAvailableDate = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(2447),
                            RoomBath = "1 Banyo",
                            RoomBed = "İki Tek Kişilik Yatak",
                            RoomDetail = "Bahçe Manzaralı",
                            RoomName = "Deluxe Oda",
                            RoomPhotoUrl = "/images/room-2.jpg",
                            RoomPrice = 150.00m
                        },
                        new
                        {
                            RoomID = 3,
                            IsRoomActive = true,
                            RoomAvailableDate = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(2448),
                            RoomBath = "2 Banyo",
                            RoomBed = "Bir Çift ve İki Tek Kişilik Yatak",
                            RoomDetail = "Orman Manzaralı",
                            RoomName = "Aile Odası",
                            RoomPhotoUrl = "/images/room-3.jpg",
                            RoomPrice = 200.00m
                        },
                        new
                        {
                            RoomID = 4,
                            IsRoomActive = true,
                            RoomAvailableDate = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(2449),
                            RoomBath = "1 Banyo",
                            RoomBed = "Çift Kişilik Yatak",
                            RoomDetail = "Havuz Manzaralı",
                            RoomName = "Süit Oda",
                            RoomPhotoUrl = "/images/room-1.jpg",
                            RoomPrice = 180.00m
                        },
                        new
                        {
                            RoomID = 5,
                            IsRoomActive = true,
                            RoomAvailableDate = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(2450),
                            RoomBath = "2 Banyo",
                            RoomBed = "İki Çift Kişilik Yatak",
                            RoomDetail = "Deniz Manzaralı",
                            RoomName = "Lüks Villa",
                            RoomPhotoUrl = "/images/room-2.jpg",
                            RoomPrice = 300.00m
                        },
                        new
                        {
                            RoomID = 6,
                            IsRoomActive = true,
                            RoomAvailableDate = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(2451),
                            RoomBath = "1 Banyo",
                            RoomBed = "Tek Kişilik Yatak",
                            RoomDetail = "Şehir Manzaralı",
                            RoomName = "Tek Kişilik Oda",
                            RoomPhotoUrl = "/images/room-3.jpg",
                            RoomPrice = 80.00m
                        },
                        new
                        {
                            RoomID = 7,
                            IsRoomActive = true,
                            RoomAvailableDate = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(2452),
                            RoomBath = "1 Banyo",
                            RoomBed = "Çift Kişilik Yatak",
                            RoomDetail = "Havuz ve Deniz Manzaralı",
                            RoomName = "Balayı Süiti",
                            RoomPhotoUrl = "/images/room-1.jpg",
                            RoomPrice = 250.00m
                        },
                        new
                        {
                            RoomID = 8,
                            IsRoomActive = true,
                            RoomAvailableDate = new DateTime(2023, 12, 5, 0, 17, 10, 433, DateTimeKind.Local).AddTicks(2453),
                            RoomBath = "1 Banyo",
                            RoomBed = "Çift Kişilik Yatak",
                            RoomDetail = "Dağ Manzaralı",
                            RoomName = "Jakuzili Oda",
                            RoomPhotoUrl = "/images/room-2.jpg",
                            RoomPrice = 170.00m
                        });
                });

            modelBuilder.Entity("Entities.Models.Subscribe", b =>
                {
                    b.Property<int>("SubscribeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscribeID"), 1L, 1);

                    b.Property<string>("SubscribeEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubscribeID");

                    b.ToTable("Subscribe");

                    b.HasData(
                        new
                        {
                            SubscribeID = 1,
                            SubscribeEmail = "kocak@gmail.com"
                        },
                        new
                        {
                            SubscribeID = 2,
                            SubscribeEmail = "kocak2@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dce5aee8-f1b7-45f3-b05c-ae98eed840b6",
                            ConcurrencyStamp = "c4e5fd19-2389-48b3-b0bb-325cc7d45d0c",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "e4ef08a3-3afc-4b35-9d56-a8ba771b94b7",
                            ConcurrencyStamp = "476251da-3314-40e6-8c0f-a096c56907dc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Booking", b =>
                {
                    b.HasOne("Entities.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
